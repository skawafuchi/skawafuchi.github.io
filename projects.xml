<?xml version="1.0" encoding="UTF-8"?>
<projects_list>

<project name="SC2Puzzles">
		<name>SC2 Puzzles</name>
		<short_description>A Starcraft II Arcade Game
		</short_description>
		<full_description>A small 10 level game that was developed in the 
		Starcraft 2 Map Editor. It is heavily inspired by the Blizzard created
		Arcade map named "Starcraft Master". It was created to show some fun and
		interesting interactions between units that were introduced in the
		Legacy of the Void and Heart of the Swarm expansions. I had originally
		planned for more levels, but I eventually just stuck with these 10
		because of the consistent balance changes for multiplayer. I may eventually
		add more levels in the future.
		</full_description>
		<note type="alert">This game is currently available to play for free in the Starcraft II Arcade!
		</note>
		<members>
			<member role="Designer and Programmer">Steven Kawafuchi</member>
		</members>

		<time_frame>
			<start_date>
				<day>DAY</day>
				<month>January</month>
				<year>2016</year>
			</start_date>
			<end_date>
				<day>DAY</day>
				<month>September</month>
				<year>2017</year>
			</end_date>
		</time_frame>
		<design>
			<level>
				<level_title>Stage 1</level_title>
				<level_image>
				https://i.imgur.com/LsWLdOh.jpg
				</level_image>
				<level_description>
				The first stage was set up to make the player dislodge a projectile that is	created by widow mines. 
				The way to beat the level is to create a building using the worker the player is given and then
				collecting the resources left on the level.
				</level_description>
				<level_notes>
				This was the first level developed and there were very few adjustments made to the level throughout 
				creating the game. The only major change that I made was changing the original objective from being
				just avoiding the widow mine damage to making the player collect the remaining minerals from a 
				mineral patch. I did this to make the objective slightly less clear so it would be a little more 
				challenging. The level also felt too short when completing it the old way.
				A couple of minor adjustments made were making the drone unburrow at the start for a little extra 
				polish and moving the worker down to avoid it being covered with the level text.
				</level_notes>
			</level>
			<level>
				<level_title>Stage 2</level_title>
				<level_image>
				https://i.imgur.com/OsE2ENJ.jpg
				</level_image>
				<level_description>
				The second stage was also set up to make the player dislodge more projectiles from the widow mine.
				This time the player has to traverse a small path and use a stalker's blink to avoid the damage to
				get to the end.
				</level_description>
				<level_notes>
				The initial design for this level was pretty rough and was a straight path with a couple of mines 
				that the player had to avoid. I also had a couple of arrows to ensure the player knew which way 
				to go, but eventually came up with the idea to use the lack of high ground vision to make the 
				player go up a small spiral path. The version seen is the second iteration as the first one was too 
				big towards the middle and prevented the player from seeing where they were able to go and widow 
				mines they needed to avoid.
				</level_notes>
			</level>
			<level>
				<level_title>Stage 3</level_title>
				<level_image>
				https://i.imgur.com/oJIakTE.jpg
				</level_image>
				<level_description>
				The third stage was made to show the player that they can use reapers' grenades to make their 
				units jump a little to get over buildings. The way the player beats it is by positioning the 
				two hellions they get close to the wall off and knock both of them over at the same time with 
				the reaper's grenade.
				</level_description>
				<level_notes>
				I don't believe there was much in terms of changing design and major adjustments to this level 
				in particular. The more challenging parts were making sure the level reset properly so the 
				player couldn't just kill off the buildings to get to the end and adjusting the timer of the 
				level to give the player enough time to complete it. I also added a bit more polish to the 
				level by adding some SCVs for the NPC to show the player a practical scenario where this might
				be useful in a competitive game.
				</level_notes>
			</level>
			<level>
				<level_title>Stage 4</level_title>
				<level_image>
				https://i.imgur.com/9LutMiW.jpg
				</level_image>
				<level_description>
				The fourth stage was created to show the player that they can move around with zealots by 
				charging their own units. The player wins by traversing a path that is under siege by a 
				series of liberators.
				</level_description>
				<level_notes>The original level design was very bland as it was a very straight zig zag 
				pattern that looked like a very blocky '2', but I eventually tilted it slightly to make 
				it look a little better. The beginning design also only had an end point that the player 
				had to get to before a timer ran out. This was OK, but it was boring and didn't feel 
				very satisfying when you won. I then got the idea to use liberators to create a sense 
				of emergency to the player and removed the timer completely. I had some difficulties in 
				terms of balancing because of how delicate the timings needed to be to ensure the player 
				had to use the mechanic twice in order to clear the stage, but I'm pretty sure I got it 
				down haha.
				</level_notes>
			</level>
			<level>
				<level_title>Stage 5</level_title>
				<level_image>
				https://i.imgur.com/s5BDBsF.jpg
				</level_image>
				<level_description>
				The fifth stage was developed to show the player that they can destroy a widow mine with 
				an oracle, even though the widow mine can one-shot it. The player wins by constantly 
				jutting in and out of the widow mine's range while dealing damage to it after revealing it.
				</level_description>
				<level_notes>
				There wasn't very much to this one in terms of difficulty settings or level design as well. 
				One thing that I did do for all levels where the player has to deal with a widow mine is have
				the widow mine unburrowed so the player can clearly see where it is before the level starts 
				instead of having to scour the entire map looking for a small dot on the ground. I also based 
				this level off of a competitive game that I saw (Bomber vs herO StarLeague 2016)! 
				</level_notes>
			</level>
			<level>
				<level_title>Stage 6</level_title>
				<level_image>
				https://i.imgur.com/dv6KKH6.jpg
				</level_image>
				<level_description>
				The sixth level was developed to show the player that they can target specific units with 
				the widow mine's attack. The player wins by destroying all of the enemy drones with the 
				widow mine before the timer expires.
				</level_description>
				<level_notes>
				This level was originally very similar to the Starcraft Master level where the player had 
				to burrow zerglings to ambush a pack of patrolling marines. In my original concept the player 
				had a widow mine and had to burrow near a pack of patrolling banelings and target the center 
				one to ensure all of them died. This was OK as well, but it felt like it was over too quickly 
				and wasn't very challenging. I eventually changed it to a scenario as if the player had just 
				gotten a dropship into the enemy base, and the enemy was trying to move all of their workers 
				to safety. In the newer version of the game I also got to show the player that they can delay 
				the widow mine's attack by switching between targets.
				</level_notes>
			</level>
			<level>
				<level_title>Stage 7</level_title>
				<level_image>
				https://i.imgur.com/oXmYvt0.jpg
				</level_image>
				<level_description>
				The seventh level was designed to show the player that they can block enemies by using 
				changelings. The player wins by blocking a ramp with the changelings and then killing the 
				enemy base.
				</level_description>
				<level_notes>
				One of the main challenges was ensuring the NPC wasn't too smart and killed off the 
				changelings so I created a very basic attack move command for the computer to ensure 
				it would get blocked off. I also experimented and tried to drag the computer's units 
				away with my own but added variety to the computer's army to ensure that it wouldn't allow 
				the player to win unintentionally. Additionally I ensured the player's roaches on the left, 
				that were created to give the player sight and time to set up their blockade, couldn't 
				move by surrounding them tightly.
				</level_notes>
			</level>
			<level>
				<level_title>Stage 8</level_title>
				<level_image>
				https://i.imgur.com/7L3sCQ0.jpg
				</level_image>
				<level_description>
				The eighth stage was designed to show the player that they can block ramps using fungal
				growths to get an incredibly favorable engagement. The player wins by using fungal 
				growth when roaches move up the ramp and positioning their entire army to attack while 
				the enemy army is stuck.
				</level_description>
				<level_notes>
				The design for this level was inspired by a streamer named Destiny who used the infestor
				very often back in the Wings of Liberty expansion before the unit was used often. He 
				used fungal growth on the ramp and called it a "fungal field" (similar to a Protoss's 
				force field) which inspired the name of the level. There wasn't much change in terms of 
				design for this level, but I believe I did experiment with the AI that the game comes 
				with but ended up creating another simple AI that uses stutter step micro in order to get 
				up the ramp.
				</level_notes>
			</level>
			<level>
				<level_title>Stage 9</level_title>
				<level_image>
				https://i.imgur.com/LdBmYiy.jpg
				</level_image>
				<level_description>
				The ninth level was designed to show the player that hatcheries have creep underneath
				them when they are being built, so the player can use it to build buildings in desperate
				times. The player wins by building a hatchery and then canceling it to place a spore 
				crawler down which kills all the enemy mutalisks.
				</level_description>
				<level_notes>
				This level went through some pretty drastic changes. At the beginning I had a setup 
				where there was an enemy army that was coming to kill off a couple of buildings that 
				the player was given. The player won by building a spawning pool so they could make some
				zerglings and kill off the NPC buildings before they lost their own. The pacing for this 
				version was slow and I would often be bored waiting around since there was so much time 
				needed creating the hatchery, canceling it, creating a spawning pool, waiting for it to 
				finish, then creating zerglings, waiting for them to finish, and then killing off the 
				enemy building. I had thought about adjusting the building times of the units and the 
				buildings, but I wanted the game to have timings as close to the multiplayer game as 
				possible so I changed the design to the current version.
				</level_notes>
			</level>
			<level>
				<level_title>Stage 10</level_title>
				<level_image>
				https://i.imgur.com/ffohY8t.jpg
				</level_image>
				<level_description>
				The tenth level was designed to show the player that they can avoid damage from the 
				lurker by moving their units as the lurker attacks. The player wins by carefully microing 
				their units around, avoiding damage while killing off the enemy lurker.
				</level_description>
				<level_notes>
				This level was inspired by a player named Boxer who showed what marines could do against 
				lurkers. I had originally made this level basic and had the player only need to move one 
				marine back and forth to avoid damage. Then I made the level hard. I made it very hard. 
				I made it so hard that I could only confirm that it was working as intended through using 
				some cheats made in the editor. I first changed it so the player could take absolutely no 
				damage from the lurker (the lurker normally requires 2 shots to kill a marine). After 
				playing around with this for a little bit, it was a bit harder but I could still manage 
				to do it consistently. As this is the last level of the game I figured it could be very 
				challenging, so I also created a custom AI to randomly target the marines, so the player 
				would never know which one it would attack. The only way the player can win is by 
				successfully microing all three marines given to avoid damage while still killing the 
				lurker.
				</level_notes>
			</level>			
		</design>
		<urls>
			<project_url>sc2puzzles.html</project_url>
			<picture_url>images/SC2 Puzzles Screenshot.png</picture_url>
			<thumbnail_url>images/thumbnails/SC2 Puzzles Thumbnail.png
			</thumbnail_url>
		</urls>
		<tags>
			<tag type="filter">
				<value>Game</value>
			</tag>
			<tag type="technology">
				<value>Starcraft 2 Map Editor</value>
				<wiki_link>http://starcraft.wikia.com/wiki/Galaxy_Map_Editor
				</wiki_link>
			</tag>
		</tags>
	</project>



	<project name="JKT">
		<name>JKT (Japanese Kanji Testinator)</name>
		<short_description> Typing game designed and created for students
			studying Japanese.
		</short_description>
		<full_description>Game designed and created for students studying
			Japanese Kanji. Flexibility was kept in mind so they could create
			their own vocabulary lists to load into the game. Players can select
			from three different difficulty levels, and the game can be used for
			other languages as well.
		</full_description>
		<note type="warning">This project was stopped in mid development for others, and I do
		not think I will continue updating this one.
		</note>
		<directions>
			<setup>Download the folder from the link. Extract the contents
				anywhere you like. Run the JKT3000 executable Jar file, and then
				click on File->Load Word Set then select any file you like. A couple
				of example vocabulary sets
				have been provided in a folder named
				Example Vocabulary Sets.
			</setup>
			<objective>Type as many Japanese vocabulary words correctly as
				possible before running out of lives!
			</objective>
			<how_to_play>
				After you have loaded a vocabulary set, press the space
				bar and start
				typing the romaji (or other) as the words float down
				the screen. If
				you have missed a word, the answer will appear along
				the bottom.
			</how_to_play>
			<hotkeys>
				<hotkey>
					<value>
						ctrl+m
					</value>
					<description>
						Toggle Music
					</description>
				</hotkey>
				<hotkey>
					<value>
						shift+backspace
					</value>
					<description>
						Clear Typing Buffer
					</description>
				</hotkey>
				<hotkey>
					<value>
						esc
					</value>
					<description>
						Stop Game
					</description>
				</hotkey>
			</hotkeys>
		</directions>
		<members>
			<member role="Designer and Programmer">Steven Kawafuchi</member>
		</members>

		<time_frame>
			<start_date>
				<day>DAY</day>
				<month>February</month>
				<year>2015</year>
			</start_date>
			<end_date>
				<day>DAY</day>
				<month></month>
				<year>2015</year>
			</end_date>
		</time_frame>

		<urls>
			<project_url>jkt.html</project_url>
			<picture_url>images/JKT 3000 Screenshot</picture_url>
			<thumbnail_url>images/thumbnails/JKT 3000 Thumbnail.png
			</thumbnail_url>
			<github_url>https://github.com/skawafuchi/JKT</github_url>
			<download_url>https://github.com/skawafuchi/JKTRelease/archive/master.zip
			</download_url>
		</urls>

		<tags>
			<tag type="filter">
				<value>Game</value>
			</tag>
			<tag type="technology">
				<value>Java</value>
				<direct_link>https://java.com/en/</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Java_(programming_language)
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>Eclipse</value>
				<direct_link>https://eclipse.org/</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Eclipse_(software)
				</wiki_link>
			</tag>
		</tags>
	</project>

	<project name="Chirpper">
		<name>Chirpper</name>
		<short_description>Audio version of Twitter web application developed
			for an informatics project class at UCI.
		</short_description>
		<full_description>Audio version of Twitter web application developed
			for an informatics project class at UCI. Project was developed in C#
			using Unity to develop the front end and Java to develop the server
			which was hosted on Heroku. The server connected with AWS S3 to store
			all of the audio files and used a PostgreSQL database in order to
			store user information.
		</full_description>
		<note type="warning">Server is disconnected from AWS S3 at the moment. No audio files
			will be stored or can be played.
		</note>
		<members>
			<member role="Server Programmer; Assisted Front-End">Steven Kawafuchi</member>
			<member role="Front-End Programmer">Mari Rann</member>
		</members>

		<time_frame>
			<start_date>
				<day>DAY</day>
				<month>April</month>
				<year>2015</year>
			</start_date>
			<end_date>
				<day>DAY</day>
				<month>June</month>
				<year>2015</year>
			</end_date>
		</time_frame>
		<urls>
			<project_url>chirpper.html</project_url>
			<github_url>https://github.com/MsRann/Chirpper</github_url>
			<play_url>play/Chirpper.html</play_url>
			<picture_url>images/Chirpper Screenshot.png</picture_url>
			<thumbnail_url>images/thumbnails/Chirpper Thumbnail.png
			</thumbnail_url>
		</urls>
		<tags>
			<tag type="filter">
				<value>Website</value>
			</tag>
			<tag type="technology">
				<value>C#</value>
				<direct_link>https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx
				</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/C_Sharp_(programming_language)
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>Unity 3D</value>
				<direct_link>http://unity3d.com/</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Unity_(game_engine)
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>Java</value>
				<direct_link>https://java.com/en/</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Java_(programming_language)
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>PostgreSQL</value>
				<direct_link>http://www.postgresql.org/</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/PostgreSQL</wiki_link>
			</tag>
			<tag type="technology">
				<value>Heroku</value>
				<direct_link>https://www.heroku.com/</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Heroku</wiki_link>
			</tag>
			<tag type="technology">
				<value>AWS S3</value>
				<direct_link>https://aws.amazon.com/s3/</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Amazon_S3</wiki_link>
			</tag>
			<tag type="technology">
				<value>Eclipse</value>
				<direct_link>https://eclipse.org/</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Eclipse_(software)
				</wiki_link>
			</tag>
		</tags>
	</project>

	<project name="Bubble Bubble Pop Pop">
		<name>Bubble Bubble Pop Pop</name>
		<short_description>Bubble popping game that used various technologies
			to allow for multi-touch interaction.
		</short_description>
		<full_description>
			Game was created as an assignment for an informatics
			class taught at UCI. The input was received from a webcam that was
			brought into a CCV. The game was developed using MT4J and Java where
			multi-touch interaction was allowed. The game's objective is to pop
			as many bubbles, by using a pulling-apart motion, as possible before
			running out of lives. Once the game completes the user can see their
			score at the end.
		</full_description>
		<members>
			<member role="Designer and Programmer">Steven Kawafuchi</member>
		</members>

		<time_frame>
			<start_date>
				<day>DAY</day>
				<month>November</month>
				<year>2014</year>
			</start_date>
			<end_date>
				<day>DAY</day>
				<month>December</month>
				<year>2014</year>
			</end_date>
		</time_frame>

		<urls>

			<project_url>bubblebubblepoppop.html</project_url>
			<github_url>https://github.com/skawafuchi/Bubble-Bubble-Pop-Pop
			</github_url>
			<picture_url>images/Bubble Bubble Pop Pop Screenshot.png
			</picture_url>
			<thumbnail_url>images/thumbnails/Bubble Bubble Pop Pop Thumbnail.png
			</thumbnail_url>
			<youtube_url>IzrRnMsqLw4</youtube_url>
		</urls>

		<tags>
			<tag type="filter">
				<value>Game</value>
			</tag>
			<tag type="technology">
				<value>CCV</value>
				<direct_link>http://ccv.nuigroup.com/#home</direct_link>
				<wiki_link>http://wiki.nuigroup.com/Community_Core_Vision
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>Java</value>
				<direct_link>https://java.com/en/</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Java_(programming_language)
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>Eclipse</value>
				<direct_link>https://eclipse.org/</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Eclipse_(software)
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>MT4J</value>
				<direct_link>https://code.google.com/p/mt4j/</direct_link>
				<wiki_link>https://de.wikipedia.org/wiki/Multi-touch_for_Java
				</wiki_link>
			</tag>
		</tags>
	</project>

	<project name="Guardians of the Arena">
		<name>Guardians of the Arena</name>
		<short_description>Networked turn-based strategy game developed over
			two quarters at UCI.
		</short_description>
		<full_description>Networked turn-based strategy game developed over
			two quarters at UCI. Worked together and discussed various aspects of
			game design and gameplay with each other. The team received advice
			from mentors from Blizzard Entertainment about game mechanics. The
			team was able to sit down with various playtesters and receive
			feedback to improve the game. Guardians of the Arena was a finalist
			at the 2015 IEEE GameSig Showcase.
		</full_description>
		<directions>
			<setup>Download the client and server from the link and extract it to
				a desired location. In the GoA Server folder, run the Guardians of
				the Arena application file. After the server is running, in the GoA
				Client file run the GoAClient application file. Input your local IP
				address into the "Set IP:" text box and login!
			</setup>
			<objective>Kill the enemy Guardian and then Soulstone!</objective>
			<how_to_play>Customize how your units enter battle in the setup
				boards menu. Once you are happy with the positioning of your units,
				test them out aganist the AI or another player! Click on a unit to
				select it and click on any of the green squares to move to it, or if
				you are in attack mode (which can be switched to with the panel in
				the bottom right) click on any of the orange tiles to attack it.
				Units level up as they deal damage and gain new abilities. You can
				attack and move as many times as your mana will allow. Kill the
				enemy soulstone to win!
			</how_to_play>
			<hotkeys>
				<hotkey>
					<value>
						F10
					</value>
					<description>
						Toggle Options Menu
					</description>
				</hotkey>
				<hotkey>
					<value>
						v
					</value>
					<description>
						Move Mode
					</description>
				</hotkey>
				<hotkey>
					<value>
						a
					</value>
					<description>
						Attack Mode
					</description>
				</hotkey>
				<hotkey>
					<value>
						e
					</value>
					<description>
						End Turn
					</description>
				</hotkey>
				<hotkey>
					<value>
						esc
					</value>
					<description>
						Deselect Unit
					</description>
				</hotkey>
			</hotkeys>
		</directions>

		<members>
			<member role="Designer and Client-Side Programmer">Steven Kawafuchi</member>
			<member role="Producer, Designer, AI/UI Programmer">Joey Shepard</member>
			<member role="Network Programmer, Database Admin">Daniel Tenorio</member>
			<member role="Graphics and Setup Screen Programmer">Jordan Hua</member>
			<member role="Sound Artist">Chris German</member>
		</members>

		<time_frame>
			<start_date>
				<day>DAY</day>
				<month>October</month>
				<year>2014</year>
			</start_date>
			<end_date>
				<day>DAY</day>
				<month>March</month>
				<year>2015</year>
			</end_date>
		</time_frame>

		<urls>
			<project_url>gota.html</project_url>
			<github_url>https://github.com/JordanLingHua/projectH</github_url>
			<download_url>http://download945.mediafire.com/3x9oqab758rg/5xk98vmr324vf8q/GoA.zip
			</download_url>
			<picture_url>images/GotA Screenshot.png</picture_url>
			<thumbnail_url>images/thumbnails/GotA Thumbnail.png
			</thumbnail_url>
			<youtube_url>HWdZ8sP5Sss</youtube_url>
		</urls>

		<tags>
			<tag type="filter">
				<value>Game</value>
			</tag>
			<tag type="technology">
				<value>C#</value>
				<direct_link>https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx
				</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/C_Sharp_(programming_language)
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>Unity 3D</value>
				<direct_link>http://unity3d.com/</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Unity_(game_engine)
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>Visual Studio</value>
				<direct_link>https://msdn.microsoft.com/en-us/vstudio/
				</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Microsoft_Visual_Studio
				</wiki_link>
			</tag>
		</tags>
	</project>

	<project name="Bazinga Z">
		<name>Bazinga Z</name>
		<short_description>Mobile shooter game that was designed and ranked
			top of
			the class.
		</short_description>
		<full_description>A mobile 2D Side-Scrolling Shooter and Tap and Swipe
			Battle game set in space! All team members contributed to the GDD and
			attended weekly meetings about the game's design. Our instructor,
			Craig Holland of FreezeTag Games, and his friend, David Daniels of
			Mogol Games, assigned a rank to each of the 10 pitches. Bazinga Z was
			#1!
		</full_description>
		<members>
			<member>Steven Kawafuchi</member>
			<member>Tamara Sahagun</member>
			<member>Mari Rann</member>
			<member>Elson Chin</member>
			<member>Jonathan Shokoor</member>
		</members>

		<time_frame>
			<start_date>
				<day>DAY</day>
				<month>September</month>
				<year>2013</year>
			</start_date>
			<end_date>
				<day>DAY</day>
				<month>December</month>
				<year>2013</year>
			</end_date>
		</time_frame>
		<urls>
			<project_url>bazingaz.html</project_url>
			<play_url>https://prezi.com/1n2xznnrnabs/bazinga-z-presentation/
			</play_url>
			<picture_url>images/Bazinga Z Screenshot.png</picture_url>
			<thumbnail_url>images/thumbnails/Bazinga Z Thumbnail.png
			</thumbnail_url>
		</urls>
		<tags>
			<tag type="filter">
				<value>Game</value>
			</tag>
			<tag type="technology">
				<value>Google Docs</value>
				<direct_link>https://www.google.com/docs/about/
				</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Google_Docs,_Sheets,_and_Slides
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>Prezi</value>
				<direct_link>https://prezi.com/
				</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Prezi
				</wiki_link>
			</tag>
		</tags>
	</project>

	<project name="This Website!">
		<name>This Website!</name>
		<short_description>Website created to link to and display all my
			projects.
		</short_description>
		<full_description>Website created to showcase various projects that I
			have completed over the years. The website attempts to be flexible
			and adjust to mobile platforms. Bootstrap was used to create aspects
			such as the carousel on the home page and navigation bar. Javascript
			was used to load information to pages from an XML file, as well as
			make the page more responsive.
		</full_description>
		<members>
			<member role="Designer and Programmer">Steven Kawafuchi</member>
		</members>

		<time_frame>
			<start_date>
				<day>DAY</day>
				<month>September</month>
				<year>2015</year>
			</start_date>
			<end_date>
				<day>DAY</day>
				<month>On</month>
				<year>Going</year>
			</end_date>
		</time_frame>

		<urls>
			<github_url>https://github.com/skawafuchi/skawafuchi.github.io
			</github_url>
			<project_url>thiswebsite.html</project_url>
			<picture_url>images/Website Screenshot.pngL</picture_url>
			<thumbnail_url>images/thumbnails/Website Thumbnail.png
			</thumbnail_url>
		</urls>
		<tags>
			<tag type="filter">
				<value>Website</value>
			</tag>
			<tag type="technology">
				<value>Javscript</value>
				<direct_link>https://www.javascript.com/
				</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/JavaScript
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>JQuery</value>
				<direct_link>https://jquery.com/
				</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/JQuery
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>Bootstrap</value>
				<direct_link>http://getbootstrap.com/
				</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>XML</value>
				<direct_link>http://www.xml.com/
				</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/XML
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>CSS</value>
				<direct_link>http://www.w3.org/Style/CSS/
				</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Cascading_Style_Sheets
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>HTML</value>
				<direct_link>http://www.w3.org/html/
				</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/HTML
				</wiki_link>
			</tag>
			<tag type="technology">
				<value>Eclipse</value>
				<direct_link>https://eclipse.org/</direct_link>
				<wiki_link>https://en.wikipedia.org/wiki/Eclipse_(software)
				</wiki_link>
			</tag>
		</tags>
	</project>

</projects_list>